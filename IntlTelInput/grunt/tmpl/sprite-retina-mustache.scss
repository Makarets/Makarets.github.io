@function retina-size($value) {
  @return floor($value / 2);
}

@mixin retina-bg-size($spriteWidth, $spriteHeight) {
  background-size: floor($spriteWidth / 2) floor($spriteHeight / 2);
}

.iti-flag {
  $item-width-maps: ({{#items}}{{strings.name}}: {{px.width}}, {{/items}});
  $item-height-maps: ({{#items}}{{strings.name}}: {{px.height}}, {{/items}});
  $standard-country: {{items.[0].standartCountry}};
  width: map-get($item-width-maps, $standard-country);
  height: map-get($item-height-maps, $standard-country);
  box-shadow: 0px 0px 1px 0px #888;
  background-image: url("../img/flags.png");
  // empty state
  background-color: #DBDBDB;


  @each $key, $width in $item-width-maps {
    @if $width != map-get($item-width-maps, $standard-country) {
      &.#{$key} {
        width: $width;
      }
    }
  }

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (   min--moz-device-pixel-ratio: 2),
  only screen and (     -o-min-device-pixel-ratio: 2/1),
  only screen and (        min-device-pixel-ratio: 2),
  only screen and (                min-resolution: 192dpi),
  only screen and (                min-resolution: 2dppx) {
    background-image: url("../img/flags@2x.png");
    background-size: {{spritesheet.px.width}} {{spritesheet.px.height}};
  }

  {{#items}}
    @if {{strings.name}} != $standard-country {
      &.{{strings.name}} {
        height: {{px.height}};
        background-position: {{px.offset_x}} {{px.offset_y}};
      }
    }
    @if {{strings.name}} == $standard-country {
      height: {{px.height}};
      background-position: {{px.offset_x}} {{px.offset_y}};
    }
  {{/items}}
}
