{"version":3,"sources":["components/game1/screens/FirstScreen.js","components/game1/screens/StartGame.js","components/game1/screens/QuestionsScreen.js","components/game1/screens/EndGameScreen.js","components/game1/game1.js","App.js","serviceWorker.js","index.js"],"names":["FirstScreen","changeScreen","alt","src","className","onClick","StartGame","QuestionsScreen","changeStatus","changeQuestion","changePoints","questionNumber","questions","status","points","answerHandler","title","img","question","answer","FakePopup","ReallyPopup","EndGameScreen","Game1","useState","screen","setScreen","setStatus","setPoints","setQuestionNumber","window","onbeforeunload","e","addEventListener","event","preventDefault","alert","number","data","length","App","exact","path","component","from","to","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.576c149b.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const FirstScreen = ({changeScreen}) => {\r\n    return (\r\n        <div>\r\n            <img\r\n                alt=\"\"\r\n                src=\"/images/game1/main-preview.svg\"\r\n                className=\"main-preview\"\r\n                onClick={() => changeScreen('StartGame')} />\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\n\r\nexport const StartGame = ({changeScreen}) => (\r\n    <div className=\"game1-container\">\r\n        <div className=\"back-arrow\" onClick={() => changeScreen('FirstScreen')}>\r\n            <img src=\"/images/game1/arrow-back.svg\" alt=\"\" className=\"hover-scale\"/>\r\n        </div>\r\n        <div className=\"container-content\">\r\n            <div className=\"container-title\">News Tinder</div>\r\n            <p>Користувач, свайваючи вправо або вліво, має оцінити це правдива новина чи фейк.\r\n                У кінці він отримує бал, наскільки він чи вона хороші у розпізнаванні маніпуляцій.</p>\r\n        </div>\r\n        <div\r\n            className=\"game-btn start-btn hover-scale\"\r\n            onClick={() => changeScreen('QuestionsScreen')}\r\n        >\r\n            На старт\r\n        </div>\r\n    </div>\r\n)","import React from \"react\"\r\n\r\nexport const QuestionsScreen = (\r\n    {\r\n        changeScreen,\r\n        changeStatus,\r\n        changeQuestion,\r\n        changePoints,\r\n        questionNumber,\r\n        questions,\r\n        status,\r\n        points\r\n    }) => {\r\n\r\n    const answerHandler = (status) => {\r\n        if(status === questions[questionNumber - 1].status) {\r\n            changePoints(points + 1)\r\n        }\r\n        changeStatus(questions[questionNumber - 1].status)\r\n    }\r\n\r\n    return (\r\n        <div className=\"game1-container\">\r\n            <div className=\"back-arrow nav-panel\" onClick={() => changeScreen('StartGame')}>\r\n                <img src=\"/images/game1/arrow-back.svg\" alt=\"\" className=\"hover-scale\"/>\r\n                <div className=\"question-numbering\">{questionNumber} / 20</div>\r\n                <div className=\"points\">\r\n                    <img src=\"/images/game1/point.svg\" alt=\"\"/>\r\n                    <span>{points}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"container-content\">\r\n                <div className=\"container-title question-title\">{questions[questionNumber - 1].title}</div>\r\n                <img src={questions[questionNumber - 1].img} alt=\"\"/>\r\n                <p className=\"question-content\">{questions[questionNumber - 1].question}</p>\r\n            </div>\r\n            <div className=\"true-false-btn\">\r\n                <div className=\"game-btn false-btn hover-scale\" onClick={() => answerHandler('fake')}>Фейк</div>\r\n                <div className=\"game-btn true-btn hover-scale\" onClick={() => answerHandler('really')}>Правда</div>\r\n            </div>\r\n            {status === 'fake' &&\r\n                <FakePopup\r\n                    answer={questions[questionNumber - 1].answer}\r\n                    changeQuestion={changeQuestion}\r\n                    questionNumber={questionNumber} />}\r\n            {status === 'really' &&\r\n                <ReallyPopup\r\n                    answer={questions[questionNumber - 1].answer}\r\n                    changeQuestion={changeQuestion}\r\n                    questionNumber={questionNumber}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst FakePopup = ({answer, changeQuestion, questionNumber}) => (\r\n    <div className=\"status-popup fake-status\">\r\n        <div className=\"status-popup-wrapper\">\r\n            <div className=\"status-popup__content\">\r\n                <div className=\"title\">Фейк</div>\r\n                <p>{answer}</p>\r\n                <div className=\"btn-wrapper\">\r\n                    <div\r\n                        className=\"game-btn next-btn hover-scale\"\r\n                        onClick={() => changeQuestion(questionNumber + 1)}>\r\n                        Далі\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst ReallyPopup = ({answer, changeQuestion, questionNumber}) => (\r\n    <div className=\"status-popup really-status\">\r\n        <div className=\"status-popup-wrapper\">\r\n            <div className=\"status-popup__content\">\r\n                <div className=\"title\">Правда</div>\r\n                <p>{answer}</p>\r\n                <div className=\"btn-wrapper\">\r\n                    <div\r\n                        className=\"game-btn next-btn hover-scale\"\r\n                        onClick={() => changeQuestion(questionNumber + 1)}>\r\n                        Далі\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)","import React from \"react\"\r\n\r\nexport const EndGameScreen  = ({points, changeScreen}) => {\r\n    return(\r\n        <div className=\"game1-container final-container\">\r\n            <div className=\"back-arrow\">\r\n                <img src=\"/images/game1/arrow-back.svg\" alt=\"\" className=\"hover-scale\" onClick={() => changeScreen('StartGame')} />\r\n            </div>\r\n            <div className=\"container-content\">\r\n                <div className=\"cup-block\">\r\n                    <img src=\"/images/game1/сup.svg\" alt=\"\"/>\r\n                    <div className=\"total-score\">\r\n                        <div><span>Бали</span>{points}<p>/ 20</p></div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"result-title\">Поради фактчекерів</div>\r\n                <div className=\"results\">\r\n                    <div>Порада 1</div>\r\n                    <p>Надійне джерело – це найбезпечніший варіант. Якщо джерело вам не відоме, перегляньте інформацію про сторінку або запитайте себе, чому користувач поширив цю розповідь.</p>\r\n                    <div>Порада 2</div>\r\n                    <p>Якщо джерело відсутнє, спробуйте знайти його. Ви можете виконати пошук зображень або текстів, щоб виявити, звідки їх взято.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from \"react\"\r\nimport './style.scss'\r\nimport data from './data.json'\r\nimport {FirstScreen} from \"./screens/FirstScreen\"\r\nimport {StartGame} from \"./screens/StartGame\"\r\nimport {QuestionsScreen} from \"./screens/QuestionsScreen\"\r\nimport {EndGameScreen} from \"./screens/EndGameScreen\"\r\n\r\n\r\nconst Game1 = () => {\r\n    const [screen, setScreen] = useState('FirstScreen')\r\n    const [status, setStatus] = useState('')\r\n    const [points, setPoints] = useState(0)\r\n    const [questionNumber, setQuestionNumber] = useState(1)\r\n\r\n    const changeScreen = (screen) => setScreen(screen)\r\n    const changeStatus = (status) => setStatus(status)\r\n    const changePoints = (points) => setPoints(points)\r\n    const changeQuestion = (number) => {\r\n        if(number <= data.length) {\r\n            setQuestionNumber(number)\r\n            setStatus('')\r\n        }else {\r\n            setScreen('EndGameScreen')\r\n        }\r\n\r\n    }\r\n\r\n    window.onbeforeunload = function(e) {\r\n        window.addEventListener('beforeunload', (event) => {\r\n            // Отмените событие, как указано в стандарте.\r\n            event.preventDefault();\r\n            // Хром требует установки возвратного значения.\r\n            alert('dwdad')\r\n        });\r\n    };\r\n\r\n    return(\r\n        <div className=\"game-field game1\">\r\n            {screen === 'FirstScreen' && <FirstScreen changeScreen={changeScreen} />}\r\n            {screen === 'StartGame' && <StartGame changeScreen={changeScreen} />}\r\n            {screen === 'QuestionsScreen' &&\r\n            <QuestionsScreen\r\n                changeScreen={changeScreen}\r\n                changeStatus={changeStatus}\r\n                changePoints={changePoints}\r\n                questionNumber={questionNumber}\r\n                changeQuestion={changeQuestion}\r\n                questions={data}\r\n                points={points}\r\n                status={status} />\r\n            }\r\n            {screen === 'EndGameScreen' && <EndGameScreen points={points} changeScreen={changeScreen} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game1","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport './App.css';\nimport Game1 from \"./components/game1/game1\"\n\nconst App = () => {\n  return(\n      <Switch>\n        <Route exact path='/game1' component={Game1}/>\n        <Route path='*' exact={true}>\n          <Redirect from='*' to='/game1' />\n        </Route>\n      </Switch>\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from \"./App\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}